openapi: 3.0.3
info:
  title: Attorney Tech API
  description: Operating and get information of AttorneyTech
  version: v1
  contact:
    name: Hsieh-Te Hsieh
    url: https://github.com/AttorneyTech
    email: attorneytech.tw@gmail.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: https://localhost/v1
externalDocs:
  description: GitHub Repository
  url: https://github.com/AttorneyTech/attorneytech-API
security:
  - OAuth2:
    - full
paths:
  /users:
    post:
      description: Create a user
      summary: Create a user
      tags:
        - users
      operationId: postUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPostBody'
      responses:  
        '201':
          description: User record successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResult'  
        '400':
          $ref: '#/components/responses/400'
        '409':
          $ref: '#/components/responses/409Post'
        '500':
          $ref: '#/components/responses/500'
    get:
      description: Get list of user
      summary: Get list of user
      tags:
        - users
      operationId: getUsers
      parameters:
        - name: filter[role]
          in: query
          required: false
          description: Filter results by role.
          schema:
            type: string
            enum: [agent, client]
        - name: filter[city]
          in: query
          required: false
          description: Filter results by city.
          schema:
            type: string
            enum:
              &cityEnums [臺北市, 新北市, 桃園市, 臺中市, 臺南市, 高雄市, 新竹縣,
              苗栗縣, 彰化縣, 南投縣, 雲林縣, 嘉義縣, 屏東縣, 宜蘭縣, 花蓮縣, 臺東縣,
              澎湖縣, 金門縣, 連江縣, 基隆市, 新竹市, 嘉義市]
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSetResult'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /users/{userId}:
    get:
      description: Get information of a user
      summary: Get information of a user
      tags:
        - users
      operationId: getUserById
      parameters:
        - $ref: '#/components/parameters/userId'       
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/UserResult'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    patch: 
      description: Update information for a user
      summary: Update information for a user
      tags:
        - users
      operationId: patchUserById
      parameters:
        - $ref: '#/components/parameters/userId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPatchBody'
        description: patch body for a user
        required: true
      responses:  
        '201':
          description: User record successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResult'  
        '400':
          $ref: '#/components/responses/400'
        '409':
          $ref: '#/components/responses/409Patch'
        '500':
          $ref: '#/components/responses/500'
  /events:
    post:
      description: Create a event
      summary: Create a event
      tags:
        - events
      operationId: postEvent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventPostBody'
      responses:  
        '201':
          description: User record successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventResult'  
        '400':
          $ref: '#/components/responses/400'
        '409':
          $ref: '#/components/responses/409Post'
        '500':
          $ref: '#/components/responses/500'
    get:
      description: Get lists of events
      summary: Get lists of events
      tags:
        - events
      operationId: getEvents
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventSetResult'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /events/{eventId}:
    get:
      description: Get information of a event
      summary: Get information of a event
      tags:
        - events
      operationId: getEventById
      parameters:
        - $ref: '#/components/parameters/eventId'       
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/EventResult'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    patch: 
      description: Update information for a event
      summary: Update information for a event
      tags:
        - events
      operationId: patchEventById
      parameters:
        - $ref: '#/components/parameters/eventId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventPatchBody'
        description: patch body for a event
        required: true
      responses:  
        '201':
          description: Event record successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventResult'  
        '400':
          $ref: '#/components/responses/400'
        '409':
          $ref: '#/components/responses/409Patch'
        '500':
          $ref: '#/components/responses/500'
  /cases:
    post:
      description: Create a case
      summary: Create a case
      tags:
        - cases
      operationId: postCase
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CasePostBody'
      responses:  
        '201':
          description: Case record successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaseResult'  
        '400':
          $ref: '#/components/responses/400'
        '409':
          $ref: '#/components/responses/409Post'
        '500':
          $ref: '#/components/responses/500'
    get:
      description: Get lists of cases
      summary: Get lists of cases
      tags:
        - cases
      operationId: getCases
      parameters:
        - name: filter[category]
          in: query
          required: false
          description: Filter results by category.
          schema:
            type: string
            enum:
              &categoryEnums [憲法, 民事, 刑事, 行政, 懲戒]
        - name: filter[year]
          in: query
          required: false
          description: Filter results by year of case.
          schema:
            type: integer
            format: int32
        - name: filter[caseType]
          in: query
          required: false
          description: Filter results by type of case.
          schema:
            type: string
        - name: filter[causeOfAction]
          in: query
          required: false
          description: Filter results by cause of action
          schema:
            type: string
        - $ref: '#/components/parameters/filterEventIds'
        - $ref: '#/components/parameters/filterClientIds'
        - $ref: '#/components/parameters/filterAgentIds'
        - $ref: '#/components/parameters/filterOppositeAgentIds'
        - $ref: '#/components/parameters/filterOppositeClientIds'
        - $ref: '#/components/parameters/filterSectionInChargeIds'
        - $ref: '#/components/parameters/filterCourtIds'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaseSetResult'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /cases/{caseId}: 
    get:
      description: Get information of a case
      summary: Get information of a case
      tags:
        - cases
      operationId: getCaseById
      parameters:
        - $ref: '#/components/parameters/caseId'       
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/CaseResult'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    patch: 
      description: Update information for a case
      summary: Update information for a case
      tags:
        - cases
      operationId: patchCaseById
      parameters:
        - $ref: '#/components/parameters/caseId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CasePatchBody'
        description: patch body for a case
        required: true
      responses:  
        '201':
          description: Case record successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaseResult'  
        '400':
          $ref: '#/components/responses/400'
        '409':
          $ref: '#/components/responses/409Patch'
        '500':
          $ref: '#/components/responses/500'
components:
  parameters:
    userId:
      name: userId
      in: path
      required: true
      description: ID of a user
      schema:
        type: string
    eventId: 
      name: eventId
      in: path
      required: true
      description: ID of a event
      schema: 
        type: string
    caseId: 
      name: caseId
      in: path
      required: true
      description: ID of a case
      schema: 
        type: string 
    filterClientIds:
      name: filter[clientIds]
      in: query
      required: false
      description: Filter result by clientIds
      schema: 
        type: string
    filterAgentIds:
      name: filter[agentIds]
      in: query
      required: false
      description: Filter result by agentIds
      schema: 
        type: string
    filterOppositeClientIds:
      name: filter[oppositeClientIds]
      in: query
      required: false
      description: Filter result by oppositeClientIds
      schema: 
        type: string
    filterOppositeAgentIds:
      name: filter[oppositeAgentIds]
      in: query
      required: false
      description: Filter result by oppositeAgentIds
      schema: 
        type: string 
    filterEventIds:
      name: filter[eventIds]
      in: query
      required: false
      description: Filter result by eventIds
      schema: 
        type: string
    filterCaseIds:
      name: filter[caseIds]
      in: query
      required: false
      description: Filter result by caseIds
      schema: 
        type: string
    filterCourtIds:
      name: filter[courtIds]
      in: query
      required: false
      description: Filter result by courtIds
      schema: 
        type: string
    filterSectionInChargeIds:
      name: filter[sectionInChargeIds]
      in: query
      required: false
      description: Filter result by sectionInChargeIds
      schema: 
        type: string
  responses:
    '400':
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResult'
    '404':
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResult'
    '409Post':
      description: >-
        The request body resource object's type was invalid or, if a client-generated ID was used, a
        resource already exists with this ID
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResult'
    '409Patch':
      description: >-
        The request body resource object had an invalid type, invalid ID, or violated a uniqueness
        constraint
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResult'
    '500':
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResult'
  schemas:
    UserType:
      type: string
      enum: [users]
    EventType:
      type: string
      enum: [events]
    CaseType:
      type: string
      enum: [cases]
    UserPostRequired:
      type: object
      required:
        - role
        - firstName
        - lastName
        - email
    UserPostAttributes:
      additionalProperties: false
      allOf:
        - $ref: '#/components/schemas/UserAttributes'
        - properties: 
            password:
              type: string
              format: password
              nullable: false
              description: Password of user's account     
    UserAttributes: 
      type: object
      properties:
        role:
          type: string
          nullable: false
          enum: [agent, client]
          description: |
            User's role
            - `agent` - The attorney of law firm
            - `client` - The client of law firm
        username:
          type: string
          nullable: false
          description: Username of user's account
          example: saulgoodman2002
        firstName:
          type: string
          nullable: false
          description: First name of user
          example: Saul
        middleName:
          type: string
          nullable: true
          description: Middle name of user
          example: Jimmy
        lastName:
          type: string
          nullable: false
          description: Last name of user
          example: Goodman
        email:
          type: string
          nullable: false
          format: email
          description: Email address of user
          example: saul.goodman@gmail.com
        phone:
          type: string
          nullable: true
          description: Phone number of user
          example: '0911123456'
        address: 
          type: object
          nullable: true
          properties:
            addressLine1:
              type: string
              description: The street name, section, and house number of user's address
              example: '西園路一段 200 號 8 樓'
            addressLine2:
              type: string
              description: The district or township or city of country name of user's address
              example: 萬華區
            city:
              type: string
              enum: *cityEnums
              description: The city name of user's address
              example: 台北市
            zipCode:
              type: string
              description: The zip code of user's address
              example: '108'
    UserSetResult:
      type: object
      properties:
        links:
          $ref: '#/components/schemas/SelfLink'
        data: 
          type: array
          items:
            $ref: '#/components/schemas/UserResource'    
    UserResult: 
      type: object
      properties:
        links:
          $ref: '#/components/schemas/SelfLink'
        data:
          $ref: '#/components/schemas/UserResource'
    UserResource:
      type: object
      properties:
        id: 
          type: string
          description: ID of a user
          example: '323'
        type:
          $ref: '#/components/schemas/UserType'
        links:
          $ref: '#/components/schemas/SelfLink'
        attributes:
          allOf:
            - $ref: '#/components/schemas/UserPostAttributes'
            - $ref: '#/components/schemas/UserAttributes'
    UserPostBody:
      type: object
      required:
        - data
      additionalProperties: false
      properties:
        data:
          type: object
          required:
            - type
            - attributes
          additionalProperties: false
          properties:
            type:
              $ref: '#/components/schemas/UserType'
            attributes:
              allOf:
                - $ref: '#/components/schemas/UserPostRequired'
                - $ref: '#/components/schemas/UserPostAttributes'
    UserPatchBody:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          required:
            - type
          additionalProperties: false
          properties:
            type:
              $ref: '#/components/schemas/UserType'
            attributes:
              $ref: '#/components/schemas/UserPostAttributes'
    EventPostRequired:
      type: object
      required:
        - name
    EventAttributes: 
      type: object
      additionalProperties: false
      properties:
        name:
          type: string
          nullable: false
          description: Event name between client and opposite client
          example: 甲與乙間臺北市東興路房地拆屋還地事件
    EventSetResult:
      type: object
      properties:
        links:
          $ref: '#/components/schemas/SelfLink'
        data: 
          type: array
          items:
            $ref: '#/components/schemas/EventResource'    
    EventResult: 
      type: object
      properties:
        links:
          $ref: '#/components/schemas/SelfLink'
        data:
          $ref: '#/components/schemas/EventResource'
    EventResource:
      type: object
      properties:
        id: 
          type: string
          description: ID of a event
          example: '23'
        type:
          $ref: '#/components/schemas/EventType'
        links:
          $ref: '#/components/schemas/SelfLink'
        attributes:
          $ref: '#/components/schemas/EventAttributes'
    EventPostBody:
      type: object
      required:
        - data
      additionalProperties: false
      properties:
        data:
          type: object
          required:
            - type
            - attributes
          additionalProperties: false
          properties:
            type:
              $ref: '#/components/schemas/EventType'
            attributes:
              allOf:
                - $ref: '#/components/schemas/EventPostRequired'
                - $ref: '#/components/schemas/EventAttributes'
    EventPatchBody:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          required:
            - type
          additionalProperties: false
          properties:
            type:
              $ref: '#/components/schemas/EventType'
            attributes:
              $ref: '#/components/schemas/EventAttributes'
    CasePostRequired:
      type: object
      required:
        - category
        - eventId
        - clientIds
        - agentIds
    CaseAttributes: 
      type: object
      additionalProperties: false
      properties:
        category:
          type: string
          nullable: false
          description: The category of case, means “案件類別” in Chinese
          enum: *categoryEnums
        year: 
          type: integer
          nullable: true
          format: int32
          description: >-
            The year of the case, Taiwan's legal system is 
            mainly calculated from the years of the Republic of China. 
            For example, 2022 year is equal to 111 year in Taiwan.
          example: '111'
        caseType: 
          type: string
          nullable: true
          description: The type of case, means “案號字別” in Chinese
          example: 訴
        number: 
          type: string
          nullable: true
          description: Number of case
          example: '3210'
        causeOfAction:
          type: string
          nullable: true
          description: The basic legal issue of case, means “案由” in Chinese
          example: 拆屋還地
        eventId: 
          type: string
          nullable: false
          description: Indicating which event the case belongs
          example: '47'
        sectionInChargeId:
          type: string
          nullable: true
          description: Indicating which section in charge is handling the case
          example: '30'
        courtId:
          type: string
          nullable: true
          description: Indicating which court is handling the case
          example: '5'
        clientIds: 
          type: array
          items:
            type: string
            example: '1113'
          nullable: false
          description: Identify which clients were involved in the case
        agentIds: 
          type: array
          items:
            type: string
            example: '1113'
          nullable: false
          description: Identify which agents in law firm were involved in the case 
        oppositeClientIds:
          type: array
          items:
            type: string
            example: '90'
          nullable: true
          description: Identify which opposite clients were involved in the case     
        oppositeAgentIds:
          type: array
          items:
            type: string
            example: '4'
          nullable: true
          description: Identify which opposite agents were involved in the case  
    CaseSetResult:
      type: object
      properties:
        links:
          $ref: '#/components/schemas/SelfLink'
        data:  
          type: array
          items:
            $ref: '#/components/schemas/CaseResource'    
    CaseResult: 
      type: object
      properties:
        links:
          $ref: '#/components/schemas/SelfLink'
        data:
          $ref: '#/components/schemas/CaseResource'
    CaseResource:
      type: object
      properties:
        id: 
          type: string
          description: ID of a case
          example: '23'
        type:
          $ref: '#/components/schemas/CaseType'
        links:
          $ref: '#/components/schemas/SelfLink'
        attributes:
          $ref: '#/components/schemas/CaseAttributes'
    CasePostBody:
      type: object
      required:
        - data
      additionalProperties: false
      properties:
        data:
          type: object
          required:
            - type
            - attributes
          additionalProperties: false
          properties:
            type:
              $ref: '#/components/schemas/CaseType'
            attributes:
              allOf:
                - $ref: '#/components/schemas/CasePostRequired'
                - $ref: '#/components/schemas/CaseAttributes'
    CasePatchBody:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          required:
            - type
          additionalProperties: false
          properties:
            type:
              $ref: '#/components/schemas/CaseType'
            attributes:
              $ref: '#/components/schemas/CaseAttributes'
    SelfLink:
      type: object
      properties:
        self:
          type: string
          format: uri
          description: Self link of resource
    ErrorObject:
      type: object
      properties:
        status:
          type: string
          description: HTTP status code
          example: '123'
        title:
          type: string
          description: A short, user readable summary of the error
          example: Not Found
        detail:
          type: string
          description: A long description of the error that may contain instance-specific
            details
    ErrorResult:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorObject'
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: 'https://localhost/oauth/token'
          scopes:
            full: Full access to the API
